"""Masm Tokenizer"""

from enum import Enum
from typing import List


class TokenType(Enum):
    UNKNOWN = ...
    SEC_DIRECTIVE = ...
    ALLOC_DIRECTIVE = ...
    META_DIRECTIVE = ...
    LABEL_DEF = ...
    LABEL_REF = ...
    INSTRUCTION = ...
    REGISTER = ...
    IMMEDIATE = ...
    SEPERATOR = ...
    OPEN_PAREN = ...
    CLOSE_PAREN = ...
    STRING = ...
    MACRO_PARAM = ...


class RawFile:
    name: str
    lines: List[str]

    def __init__(self) -> None: ...

    def __init__(self, name: str, lines: List[str]) -> None: ...

    def __repr__(self) -> str: ...


class Token:
    type: TokenType
    value: str

    def __init__(self) -> None: ...

    def __init__(self, type: TokenType, value: str) -> None: ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

    def __eq__(self, other: Token) -> bool: ...

    def __ne__(self, other: Token) -> bool: ...


class SourceLine:
    lineno: int
    tokens: List[Token]

    def __init__(self) -> None: ...

    def __init__(self, lineno: int, tokens: List[Token]) -> None: ...

    def __repr__(self) -> str: ...


class Tokenizer:
    def __init__(self) -> None: ...

    @staticmethod
    def tokenize_file(raw_file: RawFile) -> List[SourceLine]:
        """Tokenizes the given file and returns a vector of SourceLine objects"""
        ...

    @staticmethod
    def tokenize(raw_files: List[RawFile]) -> List[SourceLine]:
        """Tokenizes the given raw files and returns a vector of SourceLine objects"""
        ...
